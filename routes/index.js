const express = require('express');
const router = express.Router();
const isAuthenticated = require('../middleware/authMiddleware');

const { 
    getMessages, getMessage, createMessage, updateMessage, deleteMessage 
} = require('../controllers/messageController');
const { getAllRooms, getRoom, createRoom } = require('../controllers/roomController');

const homeRoute = async (req, res) => {
    const roomTitle = 'Home';
    const messages = await getMessages(roomTitle);
    const rooms = await getAllRooms();
    const username = req.isAuthenticated() ? req.user.username : null;

    const room = await getRoom('6731505afd8933c90f494a47'); /* _id for home room auto generated by MongoDB.
    This number will change if the home room is ever deleted */
    if (!room) {
        await createRoom('Home', 'ADMIN');
    }
    
    res.render('index', {
        title: 'Nodejs Mini Message Board',
        hasMessages: messages.length > 0,
        messages,
        count: messages.length,
        latest: messages[0],
        roomTitle: roomTitle,
        authenticated: req.isAuthenticated(),
        username,
        rooms
    });
};

router.get('/', async (req, res) => {
    await homeRoute(req, res);
});

router.get('/register', (req, res) => {
    if (req.isAuthenticated()) {
        homeRoute(req, res);
    } else {
        res.render('register', { title: 'Register New Account', error: false });
    }
});

router.get('/login', (req, res) => {
    if (req.isAuthenticated()) {
        homeRoute(req, res);
    } else {
        res.render('login', { title: 'Log in' });
    }
});

router.get('/edit/:id', isAuthenticated, async (req, res) => {
    const message = await getMessage(req.params.id);
    if (message.username === req.user.username) {
        res.render('edit', { title: 'Edit Message', message });
    } else {
        res.redirect('/');
    }
});

router.get('/delete/:id', isAuthenticated, async (req, res) => {
    const message = await getMessage(req.params.id);
    if (message.username === req.user.username) {
        res.render('delete', { title: 'Delete Message', message });
    } else {
        res.redirect('/');
    }
});

router.get('/room/:id', isAuthenticated, async (req, res) => {
    const username = req.isAuthenticated() ? req.user.username : null;
    const rooms = await getAllRooms();
    const room = await getRoom(req.params.id);

    if (!room || room.title === 'Home') {
        return res.redirect('/');
    }

    const messages = await getMessages(room.title);
    
    res.render('index', {
        title: room.title,
        hasMessages: messages.length > 0,
        messages,
        count: messages.length,
        latest: messages[0],
        roomTitle: room.title,
        authenticated: req.isAuthenticated(),
        username,
        rooms
    });
});

router.post('/message', isAuthenticated, async (req, res) => {
    const { text, room } = req.body;
    const username = req.user.username;
    const newMessage = await createMessage(text, username, room);
    const roomDoc = await getRoom(newMessage.room);
    res.redirect(`/room/${roomDoc._id}`);
});

router.post('/edit/:id', isAuthenticated, async (req, res) => {
    try {
        const message = await getMessage(req.params.id);
        await updateMessage(req.params.id, req.body.text);

        res.redirect(`/room/${message.room._id}`);
    } catch (error) {
        console.error(error.message);
        res.status(500).send("Error: Message or Room not found");
    }
});

router.post('/delete/:id', isAuthenticated, async (req, res) => {
    try {
        const message = await getMessage(req.params.id);
        if (req.body.text === 'YES') {
            await deleteMessage(message.id, message.username, message.room._id);

            res.redirect(`/room/${message.room._id}`);
        } else {
            res.redirect(`/room/${message.room._id}`);
        }
    } catch (error) {
        console.error(error.message);
        res.status(500).send("Error: Message or Room not found");
    }
});

router.post('/room', isAuthenticated, async (req, res) => {
    const { title, password } = req.body;
    const username = req.user.username;
    await createRoom(title, password, username);
    res.redirect('/');
});

router.post('/room/:id', async (req, res) => {
    const password = req.body.password;
    const room = await getRoom(req.params.id);

    if (!room) {
        return res.redirect('/');
    }

    if (password === room.password) {
        res.redirect(`/room/${room._id}`);
    } else {
        res.redirect('/');
    }
});

module.exports = router;